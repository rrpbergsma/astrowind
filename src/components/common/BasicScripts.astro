---
import { UI } from 'astrowind:config';
---

<script is:inline define:vars={{ defaultTheme: UI.theme }}>
  if (window.basic_script) {
    return;
  }

  window.basic_script = true;

  function applyTheme(theme) {
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }

  const initTheme = function () {
    if ((defaultTheme && defaultTheme.endsWith(':only')) || (!localStorage.theme && defaultTheme !== 'system')) {
      applyTheme(defaultTheme.replace(':only', ''));
    } else if (
      localStorage.theme === 'dark' ||
      (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)
    ) {
      applyTheme('dark');
    } else {
      applyTheme('light');
    }
  };
  initTheme();

  function attachEvent(selector, event, fn) {
    const matches = typeof selector === 'string' ? document.querySelectorAll(selector) : selector;
    if (matches && matches.length) {
      matches.forEach((elem) => {
        elem.addEventListener(event, (e) => fn(e, elem), false);
      });
    }
  }

  const onLoad = function () {
    let lastKnownScrollPosition = window.scrollY;
    let ticking = false;

    attachEvent('#header nav', 'click', function () {
      document.querySelector('[data-aw-toggle-menu]')?.classList.remove('expanded');
      document.body.classList.remove('overflow-hidden');
      document.getElementById('header')?.classList.remove('h-screen');
      document.getElementById('header')?.classList.remove('expanded');
      document.getElementById('header')?.classList.remove('bg-page');
      document.querySelector('#header nav')?.classList.add('hidden');
      document.querySelector('#header > div > div:last-child')?.classList.add('hidden');
    });

    attachEvent('[data-aw-toggle-menu]', 'click', function (_, elem) {
      elem.classList.toggle('expanded');
      document.body.classList.toggle('overflow-hidden');
      document.getElementById('header')?.classList.toggle('h-screen');
      document.getElementById('header')?.classList.toggle('expanded');
      document.getElementById('header')?.classList.toggle('bg-page');
      document.querySelector('#header nav')?.classList.toggle('hidden');
      document.querySelector('#header > div > div:last-child')?.classList.toggle('hidden');
    });

    attachEvent('[data-aw-toggle-color-scheme]', 'click', function () {
      if (defaultTheme.endsWith(':only')) {
        return;
      }
      document.documentElement.classList.toggle('dark');
      localStorage.theme = document.documentElement.classList.contains('dark') ? 'dark' : 'light';
    });

    attachEvent('[data-aw-social-share]', 'click', function (_, elem) {
      const network = elem.getAttribute('data-aw-social-share');
      const url = encodeURIComponent(elem.getAttribute('data-aw-url'));
      const text = encodeURIComponent(elem.getAttribute('data-aw-text'));

      let href;
      switch (network) {
        case 'facebook':
          href = `https://www.facebook.com/sharer.php?u=${url}`;
          break;
        case 'twitter':
          href = `https://twitter.com/intent/tweet?url=${url}&text=${text}`;
          break;
        case 'linkedin':
          href = `https://www.linkedin.com/shareArticle?mini=true&url=${url}&title=${text}`;
          break;
        case 'whatsapp':
          href = `https://wa.me/?text=${text}%20${url}`;
          break;
        case 'mail':
          href = `mailto:?subject=%22${text}%22&body=${text}%20${url}`;
          break;

        default:
          return;
      }

      const newlink = document.createElement('a');
      newlink.target = '_blank';
      newlink.href = href;
      newlink.click();
    });

    const screenSize = window.matchMedia('(max-width: 767px)');
    screenSize.addEventListener('change', function () {
      document.querySelector('[data-aw-toggle-menu]')?.classList.remove('expanded');
      document.body.classList.remove('overflow-hidden');
      document.getElementById('header')?.classList.remove('h-screen');
      document.getElementById('header')?.classList.remove('expanded');
      document.getElementById('header')?.classList.remove('bg-page');
      document.querySelector('#header nav')?.classList.add('hidden');
      document.querySelector('#header > div > div:last-child')?.classList.add('hidden');
    });

    function applyHeaderStylesOnScroll() {
      const header = document.querySelector('#header[data-aw-sticky-header]');
      if (!header) return;
      if (lastKnownScrollPosition > 60 && !header.classList.contains('scroll')) {
        header.classList.add('scroll');
      } else if (lastKnownScrollPosition <= 60 && header.classList.contains('scroll')) {
        header.classList.remove('scroll');
      }
      ticking = false;
    }
    applyHeaderStylesOnScroll();

    attachEvent([document], 'scroll', function () {
      lastKnownScrollPosition = window.scrollY;

      if (!ticking) {
        window.requestAnimationFrame(() => {
          applyHeaderStylesOnScroll();
        });
        ticking = true;
      }
    });
  };
  const onPageShow = function () {
    document.documentElement.classList.add('motion-safe:scroll-smooth');
    const elem = document.querySelector('[data-aw-toggle-menu]');
    if (elem) {
      elem.classList.remove('expanded');
    }
    document.body.classList.remove('overflow-hidden');
    document.getElementById('header')?.classList.remove('h-screen');
    document.getElementById('header')?.classList.remove('expanded');
    document.querySelector('#header nav')?.classList.add('hidden');
  };

  window.onload = onLoad;
  window.onpageshow = onPageShow;

  document.addEventListener('astro:after-swap', () => {
    initTheme();
    onLoad();
    onPageShow();
  });

  // Handle smooth scrolling for anchor links across all pages
  function setupSmoothScrolling() {
    // Handle links that start with # (pure anchor links)
    document.querySelectorAll('a[href^="#"]:not([href="#"])').forEach((anchor) => {
      anchor.addEventListener('click', function (e) {
        e.preventDefault();

        const targetId = this.getAttribute('href').substring(1);
        const targetElement = document.getElementById(targetId);

        if (targetElement) {
          window.scrollTo({
            top: targetElement.offsetTop - 50, // Offset for header
            behavior: 'smooth',
          });
        }
      });
    });

    // Handle links that contain # but don't start with it (page + anchor)
    document.querySelectorAll('a[href*="#"]:not([href^="#"])').forEach((anchor) => {
      anchor.addEventListener('click', function (e) {
        const href = this.getAttribute('href');
        const isHashLink = this.getAttribute('data-hash-link') === 'true';

        // Check if this is a link to the current page
        // First, extract the path part (before the hash)
        const hrefPath = href.split('#')[0];
        const currentPath = window.location.pathname;

        // Consider it's the current page if:
        // 1. The path matches exactly
        // 2. The href is just a hash (like '/#services')
        // 3. The href path is '/' and we're on the homepage
        const isCurrentPage =
          currentPath === hrefPath ||
          hrefPath === '' ||
          (hrefPath === '/' && (currentPath === '/' || currentPath.endsWith('/index.html')));

        // For hash links, we want to update the URL and scroll to the element
        if (isHashLink || isCurrentPage) {
          e.preventDefault();

          const hashIndex = href.indexOf('#');
          if (hashIndex !== -1) {
            const targetId = href.substring(hashIndex + 1);
            const targetElement = document.getElementById(targetId);

            if (targetElement) {
              // Update the URL with the hash fragment
              history.pushState(null, null, href);

              window.scrollTo({
                top: targetElement.offsetTop - 50, // Offset for header
                behavior: 'smooth',
              });
            } else {
              // If the target element doesn't exist on the current page, navigate to the page
              window.location.href = href;
            }
          } else {
            // If there's no hash fragment, just navigate to the page
            window.location.href = href;
          }
        }
      });
    });
  }

  // Handle language changes and hash navigation
  function setupLanguageNavigation() {
    // Initialize language preference from localStorage or default to 'en'
    function getStoredLanguage() {
      return localStorage.getItem('preferredLanguage') || 'en';
    }

    // Store language preference in localStorage
    function storeLanguagePreference(langCode) {
      localStorage.setItem('preferredLanguage', langCode);
    }

    // Function to update URLs with the current language
    function updateUrlsWithLanguage() {
      const currentLang = getStoredLanguage();
      const supportedLanguages = ['en', 'nl', 'de', 'fr'];

      // Update all internal links to include the language prefix
      document.querySelectorAll('a[href^="/"]:not([href^="//"])').forEach((link) => {
        const href = link.getAttribute('href');
        if (!href) return;

        // Skip hash-only links (e.g., "#services")
        if (href.startsWith('#')) {
          return;
        }

        // Extract hash fragment if present
        let hashFragment = '';
        let pathWithoutHash = href;

        if (href.includes('#')) {
          const parts = href.split('#');
          pathWithoutHash = parts[0];
          hashFragment = '#' + parts[1];
        }

        // Parse the URL path (without hash) to check for existing language code
        const pathSegments = pathWithoutHash.split('/').filter(Boolean);
        const hasLanguagePrefix = pathSegments.length > 0 && supportedLanguages.includes(pathSegments[0]);

        // If it already has a language prefix but it's different from the current language,
        // update it to the current language
        if (hasLanguagePrefix && pathSegments[0] !== currentLang) {
          // Replace the existing language prefix with the current one
          pathSegments[0] = currentLang;
          const newPath = '/' + pathSegments.join('/');

          // Set the new href with the hash fragment (if any)
          link.setAttribute('href', newPath + hashFragment);
          return;
        }

        // If it doesn't have a language prefix, add the current language
        if (!hasLanguagePrefix) {
          // Create the new path with the language prefix
          const newPath = pathWithoutHash === '/' ? `/${currentLang}` : `/${currentLang}${pathWithoutHash}`;

          // Set the new href with the hash fragment (if any)
          link.setAttribute('href', newPath + hashFragment);
        }
      });
    }

    // Listen for the custom languageChanged event
    document.addEventListener('languageChanged', (event) => {
      // Store the selected language in localStorage
      if (event.detail && event.detail.langCode) {
        storeLanguagePreference(event.detail.langCode);

        // Always update all internal links with the new language
        // regardless of whether we're doing a full page reload
        updateUrlsWithLanguage();

        // If this event includes a path but doesn't indicate it will reload,
        // force a full page reload to ensure all content is properly translated
        if (event.detail.path && !event.detail.willReload) {
          window.location.replace(event.detail.path);
        }
      }
    });

    // Process links when the page loads
    updateUrlsWithLanguage();

    // Process links after client-side navigation
    document.addEventListener('astro:page-load', updateUrlsWithLanguage);

    // Also update links when the DOM content is loaded
    document.addEventListener('DOMContentLoaded', updateUrlsWithLanguage);

    // Check for hash in URL on page load and scroll to it
    function scrollToHashOnLoad() {
      if (window.location.hash) {
        const targetId = window.location.hash.substring(1);
        const targetElement = document.getElementById(targetId);

        if (targetElement) {
          // Use setTimeout to ensure the page has fully loaded
          setTimeout(() => {
            window.scrollTo({
              top: targetElement.offsetTop - 50, // Offset for header
              behavior: 'smooth',
            });
          }, 100);
        }
      }
    }

    scrollToHashOnLoad();

    // Make language functions available globally
    window.languageUtils = {
      getStoredLanguage,
      storeLanguagePreference,
    };
  }

  document.addEventListener('DOMContentLoaded', () => {
    setupSmoothScrolling();
    setupLanguageNavigation();
  });

  // Re-attach event listeners after page transitions
  document.addEventListener('astro:after-swap', () => {
    setupSmoothScrolling();
    setupLanguageNavigation();
  });
</script>

<script is:inline>
  /* Inspired by: https://github.com/heidkaemper/tailwindcss-intersect */
  const Observer = {
    observer: null,
    delayBetweenAnimations: 100,
    animationCounter: 0,

    start() {
      const selectors = [
        '[class*=" intersect:"]',
        '[class*=":intersect:"]',
        '[class^="intersect:"]',
        '[class="intersect"]',
        '[class*=" intersect "]',
        '[class^="intersect "]',
        '[class$=" intersect"]',
      ];

      const elements = Array.from(document.querySelectorAll(selectors.join(',')));

      const getThreshold = (element) => {
        if (element.classList.contains('intersect-full')) return 0.99;
        if (element.classList.contains('intersect-half')) return 0.5;
        if (element.classList.contains('intersect-quarter')) return 0.25;
        return 0;
      };

      elements.forEach((el) => {
        el.setAttribute('no-intersect', '');
        el._intersectionThreshold = getThreshold(el);
      });

      const callback = (entries) => {
        entries.forEach((entry) => {
          requestAnimationFrame(() => {
            const target = entry.target;
            const intersectionRatio = entry.intersectionRatio;
            const threshold = target._intersectionThreshold;

            if (target.classList.contains('intersect-no-queue')) {
              if (entry.isIntersecting) {
                target.removeAttribute('no-intersect');
                if (target.classList.contains('intersect-once')) {
                  this.observer.unobserve(target);
                }
              } else {
                target.setAttribute('no-intersect', '');
              }
              return;
            }

            if (intersectionRatio >= threshold) {
              if (!target.hasAttribute('data-animated')) {
                target.removeAttribute('no-intersect');
                target.setAttribute('data-animated', 'true');

                const delay = this.animationCounter * this.delayBetweenAnimations;
                this.animationCounter++;

                target.style.transitionDelay = `${delay}ms`;
                target.style.animationDelay = `${delay}ms`;

                if (target.classList.contains('intersect-once')) {
                  this.observer.unobserve(target);
                }
              }
            } else {
              target.setAttribute('no-intersect', '');
              target.removeAttribute('data-animated');
              target.style.transitionDelay = '';
              target.style.animationDelay = '';

              this.animationCounter = 0;
            }
          });
        });
      };

      this.observer = new IntersectionObserver(callback.bind(this), { threshold: [0, 0.25, 0.5, 0.99] });

      elements.forEach((el) => {
        this.observer.observe(el);
      });
    },
  };

  Observer.start();

  document.addEventListener('astro:after-swap', () => {
    Observer.start();
  });
</script>

<!-- Contact Form Handling -->
<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    setupContactForm();
  });

  document.addEventListener('astro:after-swap', () => {
    setupContactForm();
  });

  // Netlify form handling setup

  async function setupContactForm() {
    const contactForm = document.getElementById('contact-form');
    if (!contactForm) return;

    // Form validation and submission
    contactForm.addEventListener('submit', async function (e) {
      e.preventDefault();

      // Reset previous error messages
      resetFormErrors();

      // Client-side validation
      if (!validateForm(contactForm)) {
        return;
      }

      // Show loading state
      const submitButton = contactForm.querySelector('button[type="submit"]');
      const originalButtonText = submitButton.innerHTML;
      submitButton.disabled = true;
      submitButton.innerHTML = 'Sending...';

      try {
        const formData = new FormData(contactForm);

        // Add timestamp to help prevent duplicate submissions
        formData.append('timestamp', Date.now().toString());

        // Submit the form to Netlify
        const response = await fetch('/', {
          method: 'POST',
          headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
          body: new URLSearchParams(formData).toString(),
        });

        if (response.ok) {
          // Show success message
          document.getElementById('form-success').classList.remove('hidden');
          contactForm.reset();
        } else {
          document.getElementById('form-error').classList.remove('hidden');
        }
      } catch {
        document.getElementById('form-error').classList.remove('hidden');
      } finally {
        // Restore button state
        submitButton.disabled = false;
        submitButton.innerHTML = originalButtonText;
      }
    });

    // Add input validation on blur
    contactForm.querySelectorAll('input, textarea').forEach((input) => {
      input.addEventListener('blur', function () {
        validateInput(this);
      });

      input.addEventListener('input', function () {
        // Remove error styling when user starts typing
        this.classList.remove('border-red-500');
        const feedbackElement = this.closest('div').querySelector('.invalid-feedback');
        if (feedbackElement) {
          feedbackElement.classList.add('hidden');
        }
      });
    });
  }

  function validateForm(form) {
    let isValid = true;

    // Validate all inputs
    form.querySelectorAll('input, textarea').forEach((input) => {
      if (!validateInput(input)) {
        isValid = false;
      }
    });

    return isValid;
  }

  function validateInput(input) {
    if (!input.required) return true;

    let isValid = true;
    const feedbackElement = input.closest('div').querySelector('.invalid-feedback');

    // Reset previous error
    if (feedbackElement) {
      feedbackElement.classList.add('hidden');
    }
    input.classList.remove('border-red-500');

    // Checkbox validation (special case for disclaimer)
    if (input.type === 'checkbox') {
      if (input.required && !input.checked) {
        isValid = false;
        if (feedbackElement) {
          feedbackElement.textContent = 'Please check the required consent box before submitting';
          feedbackElement.classList.remove('hidden');
        }
        input.classList.add('border-red-500');
        // Add red border to the checkbox container for better visibility
        const checkboxContainer = input.closest('.flex.items-start');
        if (checkboxContainer) {
          checkboxContainer.classList.add('checkbox-error');
        }
      } else {
        // Remove error styling when checkbox is checked
        const checkboxContainer = input.closest('.flex.items-start');
        if (checkboxContainer) {
          checkboxContainer.classList.remove('checkbox-error');
        }
      }
      return isValid;
    }

    // Check if empty
    if (input.required && !input.value.trim()) {
      isValid = false;
      if (feedbackElement) {
        feedbackElement.textContent = 'This field is required';
        feedbackElement.classList.remove('hidden');
      }
      input.classList.add('border-red-500');
    }

    // Email validation
    if (input.type === 'email' && input.value.trim()) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(input.value.trim())) {
        isValid = false;
        if (feedbackElement) {
          feedbackElement.textContent = 'Please enter a valid email address';
          feedbackElement.classList.remove('hidden');
        }
        input.classList.add('border-red-500');
      }
    }

    // Textarea minimum length
    if (input.tagName === 'TEXTAREA' && input.value.trim().length < 10) {
      isValid = false;
      if (feedbackElement) {
        feedbackElement.textContent = 'Please enter at least 10 characters';
        feedbackElement.classList.remove('hidden');
      }
      input.classList.add('border-red-500');
    }

    return isValid;
  }

  function resetFormErrors() {
    // Hide all error messages
    document.querySelectorAll('.invalid-feedback').forEach((el) => {
      el.classList.add('hidden');
    });

    // Remove error styling
    document.querySelectorAll('input, textarea').forEach((input) => {
      input.classList.remove('border-red-500');
    });

    // Remove checkbox container error styling
    document.querySelectorAll('.flex.items-start').forEach((container) => {
      container.classList.remove('checkbox-error');
    });

    // Hide form-level messages
    document.getElementById('form-success')?.classList.add('hidden');
    document.getElementById('form-error')?.classList.add('hidden');
  }
</script>
