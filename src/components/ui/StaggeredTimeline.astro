---
import { Icon } from 'astro-icon/components';
import { twMerge } from 'tailwind-merge';
import type { Item } from '~/types';

export interface Props {
  items?: Array<Item>;
  defaultIcon?: string;
  classes?: Record<string, string>;
}

const { items = [], classes = {}, defaultIcon } = Astro.props as Props;

const {
  container: containerClass = '',
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: defaultIconClass = 'text-primary dark:text-blue-300 border-primary dark:border-blue-500 dark:shadow-blue-500/40 dark:shadow-sm',
  arrow: arrowClass = 'text-primary dark:text-slate-200',
} = classes;
---

{
  items && items.length && (
    <div class={twMerge("relative mx-auto max-w-5xl pt-8", containerClass)}>
      {/* Mobile timeline line */}
      <div class="absolute left-4 top-8 h-full w-1 bg-primary/30 dark:bg-blue-700/30 md:hidden"></div>
      
      <div class="relative min-h-screen">
        {items.map((item, index) => {
          const { title, description, icon, classes: itemClasses = {} } = item;
          const isEven = index % 2 === 0;
          const isFirst = index === 0;
          
          // Calculate vertical offset based on position with consistent spacing
          const offsetValue = index * 8;
          
          return (
            <div
              class={`relative ${isEven ? 'ml-0 mr-auto' : 'ml-auto mr-0'} w-full md:w-[45%] mb-12`}
              style={!isFirst ? `margin-top: ${offsetValue}rem;` : ''}
              id={`timeline-item-${index}`}
            >
              {/* Arrow connecting to previous item (except for first item) */}
              {!isFirst && (
                <div class="absolute hidden md:block">
                  {isEven ? (
                    <div class={twMerge("absolute -left-16 -top-16 w-32 h-32", arrowClass)}>
                      <svg class="w-full h-full" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M20 20 C 40 20, 60 80, 80 80" stroke="currentColor" stroke-width="2.5" fill="none" />
                        <path d="M80 80 L 70 72" stroke="currentColor" stroke-width="2.5" />
                        <path d="M80 80 L 72 90" stroke="currentColor" stroke-width="2.5" />
                      </svg>
                    </div>
                  ) : (
                    <div class={twMerge("absolute -right-16 -top-16 w-32 h-32", arrowClass)}>
                      <svg class="w-full h-full" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M80 20 C 60 20, 40 80, 20 80" stroke="currentColor" stroke-width="2.5" fill="none" />
                        <path d="M20 80 L 30 72" stroke="currentColor" stroke-width="2.5" />
                        <path d="M20 80 L 28 90" stroke="currentColor" stroke-width="2.5" />
                      </svg>
                    </div>
                  )}
                </div>
              )}
              
              {/* Timeline item */}
              <div
                class={twMerge(
                  'flex intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade border border-gray-200 dark:border-gray-700 rounded-lg p-5 hover:shadow-md transition-all duration-300 ease-in-out backdrop-blur-sm bg-white/15 dark:bg-transparent hover:bg-white/30 hover:backdrop-blur-md dark:hover:backdrop-blur-md ml-8 md:ml-0 shadow-sm relative hover:translate-y-[-2px]',
                  panelClass,
                  itemClasses?.panel
                )}
              >
                <div class="flex-shrink-0 mr-4 rtl:mr-0 rtl:ml-4">
                  {(icon || defaultIcon) && (
                    <Icon
                      name={icon || defaultIcon}
                      class={twMerge('w-10 h-10 p-2 rounded-full border-2 shadow-sm', defaultIconClass, itemClasses?.icon)}
                    />
                  )}
                </div>
                <div>
                  {title && <p class={twMerge('text-lg font-bold', titleClass, itemClasses?.title)} set:html={title} />}
                  {description && (
                    <div class="text-muted mt-2 overflow-hidden">
                      <div
                        class={twMerge('text-sm max-h-[4rem] md:max-h-none hover:max-h-[300px] transition-all duration-500 ease-staggered', descriptionClass, itemClasses?.description)}
                        set:html={description}
                      />
                    </div>
                  )}
                </div>
              </div>
            </div>
          );
        })}
      </div>
      
      {/* Responsive styles for small screens */}
      <style>
        @media (max-width: 768px) {
          #timeline-item-0,
          #timeline-item-1,
          #timeline-item-2,
          #timeline-item-3,
          #timeline-item-4 {
            margin-top: 0 !important;
            margin-left: 2rem !important;
            margin-right: 0 !important;
            width: calc(100% - 2rem) !important;
          }
        }
        
        /* Custom easing function for staggered timeline */
        .ease-staggered {
          transition-timing-function: cubic-bezier(0.25, 0.46, 0.45, 0.94);
        }
        
        /* Fade effect for the gradient overlay */
        .hover\:opacity-0:hover {
          opacity: 0;
        }
      </style>
    </div>
  )
}